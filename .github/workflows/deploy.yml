name: CI/CD to EC2 (Docker)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: saycando/myapp
  CONTAINER_NAME: myapp
  ENV_PATH: /home/ubuntu/app/BE/.env
  APP_PORT: "8080"

jobs:
  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # A) 기본 빌더(docker driver) 제거(혼선 방지)
      - name: Remove default builder
        run: docker buildx rm default || true

      # B) docker-container 드라이버로 빌더 생성 + 사용 (이름: gha)
      - name: Create buildx builder (docker-container)
        run: |
          docker buildx rm gha || true
          docker buildx create --name gha --driver docker-container --use
          docker buildx inspect --bootstrap

      # (선택) 현재 빌더 확인 -> driver: docker-container 여야 함
      - name: Show buildx info
        run: docker buildx ls

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Ensure gradlew is executable in workspace
        run: |
          chmod +x gradlew
          sed -i 's/\r$//' gradlew || true
          ls -l gradlew
          
      - name: Build and Push (with GHA cache)
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: gha
          push: true
          tags: |
            saycando/myapp:latest
            saycando/myapp:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Setup SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > key.pem
          chmod 600 key.pem

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.EC2_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy on EC2 (pull & restart container)
        run: |
          ssh -i key.pem -o StrictHostKeyChecking=yes ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} <<EOF
            set -euo pipefail
      
           # === GitHub Actions 값들을 원격 쉘 변수로 '주입' ===
            DOCKERHUB_USERNAME='${{ secrets.DOCKERHUB_USERNAME }}'
            DOCKERHUB_TOKEN='${{ secrets.DOCKERHUB_TOKEN }}'
            IMAGE_NAME='${{ env.IMAGE_NAME }}'
            CONTAINER_NAME='${{ env.CONTAINER_NAME }}'
            ENV_PATH='${{ env.ENV_PATH }}'
            APP_PORT='${{ env.APP_PORT }}'
            TAG='${{ github.sha }}'  # 커밋 SHA

            # === 필수 변수 검증 ===
            [ -n "$DOCKERHUB_USERNAME" ] || { echo "ERROR: DOCKERHUB_USERNAME empty"; exit 1; }
            [ -n "$DOCKERHUB_TOKEN" ]    || { echo "ERROR: DOCKERHUB_TOKEN empty"; exit 1; }
            [ -n "$IMAGE_NAME" ]         || { echo "ERROR: IMAGE_NAME empty"; exit 1; }
            [ -n "$CONTAINER_NAME" ]     || { echo "ERROR: CONTAINER_NAME empty"; exit 1; }
            [ -n "$ENV_PATH" ]           || { echo "ERROR: ENV_PATH empty"; exit 1; }
            [ -n "$APP_PORT" ]           || { echo "ERROR: APP_PORT empty"; exit 1; }
            [ -n "$TAG" ]                || { echo "ERROR: TAG (github.sha) empty"; exit 1; }


           # 디스크 여유 적을 때 대비(선택)
            docker system df || true
            
            # 1) Docker Hub 로그인 (토큰을 표준입력으로 전달)
            printf "%s" "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin || true
            docker pull "$IMAGE_NAME:$TAG"

           # 2) 기존 종료/정리
            docker stop "$CONTAINER_NAME" || true
            docker rm   "$CONTAINER_NAME" || true
            docker image prune -f || true
      
            # 3) 기존 컨테이너 교체
            docker stop "\$CONTAINER_NAME" || true
            docker rm   "\$CONTAINER_NAME" || true
            docker image prune -f || true
      
             # 3) 재기동 (루프백만 바인딩 → Nginx가 프록시)
            docker run -d --name "$CONTAINER_NAME" \
              --restart unless-stopped \
              -p 127.0.0.1:"$APP_PORT":8080 \
              --env-file "$ENV_PATH" \
              "$IMAGE_NAME:$TAG"
      
            # 5) 상태 점검
            sleep 2
            curl -s -I http://127.0.0.1:"\$APP_PORT" || true
          EOF
